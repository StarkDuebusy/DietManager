extends sidebarlayout

block content
  .col-12.col-md-8.col-lg-9.col-xl-10.pl-lg-4
    .row
      .col-6.col-xl-3.d-flex
        .card.flex-fill
          .card-body.py-3
            .row
              .col-12.col-sm-4.align-self-center.text-center.text-sm-left
                .icon.icon-primary
                  i.align-middle(data-feather='activity')
              .col-12.col-sm-8.align-self-center.text-center.text-sm-right
                //- p.text-muted.mb-1 최근 몸무게 변화
                p.text-muted.mb-1 Recent weight
                if needDailyReport
                  .btnGotoDailyReport.btn.btn-primary
                    //- span.align-middle 1일 다이어트 일지를 작성해주세요.
                    span.align-middle Please input one-day diet diary.
                else
                  h2
                    if nutritionInfo.weightDiff < 0
                      i.text-danger.fas.fa-caret-down
                      | 
                    else if nutritionInfo.weightDiff > 0
                      i.text-primary.fas.fa-caret-up
                      | 
                    span #{nutritionInfo.weight}
                    span KG
                  p 
                    if nutritionInfo.weightDiff < 0
                      strong.text-danger #{nutritionInfo.weightDiff}
                      strong.text-danger KG
                    else if nutritionInfo.weightDiff > 0
                      strong.text-primary +
                      strong.text-primary #{nutritionInfo.weightDiff}
                      strong.text-primary KG
      .col-6.col-xl-3.d-flex
        .card.flex-fill
          .card-body.py-3
            .row
              .col-12.col-sm-4.align-self-center.text-center.text-sm-left
                .icon.icon-danger
                  i.align-middle(data-feather='award')
              .col-12.col-sm-8.align-self-center.text-center.text-sm-right
                //- p.text-muted.mb-1 목표 몸무게 예상 달성일
                p.text-muted.mb-1 Target weight attainment date
                h2 2019.06.19
                //- p.text-muted  서비스 준비중
                p.text-muted  Preparing for service
      .col-6.col-xl-3.d-flex
        .card.flex-fill
          .card-body.py-3
            .row
              .col-12.col-sm-4.align-self-center.text-center.text-sm-left
                .icon.icon-success
                  i.align-middle(data-feather='twitter')
              .col-12.col-sm-8.align-self-center.text-center.text-sm-right
                //- p.text-muted.mb-1 1식 당 닭가슴살
                p.text-muted.mb-1 Chicken breast per meal
                if needDailyReport
                  .btnGotoDailyReport.btn.btn-primary
                    //- span.align-middle 1일 다이어트 일지를 작성해주세요.
                    span.align-middle Please input one-day diet diary.
                else
                  h2
                    if nutritionInfo.proteinDiff < 0
                      i.text-danger.fas.fa-caret-down
                      | 
                    else if nutritionInfo.proteinDiff > 0
                      i.text-primary.fas.fa-caret-up
                      | 
                    span #{nutritionInfo.protein}
                    span g
                  p 
                    if nutritionInfo.proteinDiff < 0
                      strong.text-danger #{nutritionInfo.proteinDiff}
                      strong.text-danger g
                    else if nutritionInfo.proteinDiff > 0
                      strong.text-primary +
                      strong.text-primary #{nutritionInfo.proteinDiff}
                      strong.text-primary g
      .col-6.col-xl-3.d-flex
        .card.flex-fill
          .card-body.py-3
            .row
              .col-12.col-sm-4.align-self-center.text-center.text-sm-left
                .icon.icon-warning
                  i.align-middle(data-feather='heart')
              .col-12.col-sm-8.align-self-center.text-center.text-sm-right
                p.text-muted.mb-1 Sweet potato per meal
                if needDailyReport
                  .btnGotoDailyReport.btn.btn-primary
                    //- span.align-middle 1일 다이어트 일지를 작성해주세요.
                    span.align-middle Please input one-day diet diary.
                else
                  h2
                    if nutritionInfo.carboDiff < 0
                      i.text-danger.fas.fa-caret-down
                      | 
                    else if nutritionInfo.carboDiff > 0
                      i.text-primary.fas.fa-caret-up
                      | 
                    span #{nutritionInfo.carbo}
                    span g
                  p 
                    if nutritionInfo.carboDiff < 0
                      strong.text-danger #{nutritionInfo.carboDiff}
                      strong.text-danger g
                    else if nutritionInfo.carboDiff > 0
                      strong.text-primary +
                      strong.text-primary #{nutritionInfo.carboDiff}
                      strong.text-primary g
    .row
      .col-12.col-lg-12.d-flex
        .card.flex-fill.w-100
          .card-header
            .row
              .col-md-6
                //- h5.card-title.mb-0.mt-2 몸무게 변화
                h5.card-title.mb-0.mt-2 Weight changes
          .card-body
            ul.pagination.pagination-lg.justify-content-center
              li.page-item
                #btnPrevMonth.page-link
                  i.fas.fa-angle-left
              li.page-item
                //- strong#txtMonth.page-link 1월
                strong#txtMonth.page-link Jan
              li.page-item
                #btnNextMonth.page-link
                  i.fas.fa-angle-right
            .chart.chart-lg.mt-2
              canvas#chartWeight
        script.
          var chartWeight;
          document.addEventListener("DOMContentLoaded", function(event) {
            chartWeight = new Chart(document.getElementById("chartWeight"), {
              type: 'line',
              data: {
                //- labels: ["1일"],
                labels: ["Day 1"],
                datasets: [{
                  //- label: "몸무게",
                  label: "Body weight",
                  fill: false,
                  backgroundColor: "rgba(65, 212, 146, 0.5)",
                  borderColor: "#41D492",
                  data: [0]
                }]
              },
              options: {
                maintainAspectRatio: false,
                legend: {
                  display: true
                },
                tooltips: {
                  intersect: false,
                  callbacks: {
                    label: function(tooltipItem, data) {
                        var label = data.datasets[tooltipItem.datasetIndex].label || '';

                        if (label) {
                            label += ' : ';
                        }
                        label += Math.round(tooltipItem.yLabel * 100) / 100;
                        label += 'KG';
                        return label;
                    }
                  }
                },
                hover: {
                  intersect: true
                },
                plugins: {
                  filler: {
                    propagate: false
                  }
                },
                elements: {
                  line: {
                    tension: 0
                  }
                },
                scales: {
                  xAxes: [{
                    reverse: true,
                    gridLines: {
                      color: "rgba(0,0,0,0.0)"
                    }
                  }],
                  yAxes: [{
                    ticks: {
                      stepSize: 5
                    },
                    display: true,
                    borderDash: [5, 5],
                    gridLines: {
                      color: "rgba(0,0,0,0)",
                      fontColor: "#fff"
                    }
                  }]
                }
              }
            });
          });
    .row
      .col-12.col-lg-12.d-flex
        .card.flex-fill.w-100
          .card-header
            .row
              .col-md-12
                //- h5.card-title.mb-0.mt-2 체성분 변화
                h5.card-title.mb-0.mt-2 Bodycomposition changes
          .card-body
            ul.pagination.pagination-lg.justify-content-center
              li.page-item
                .btnPrevYear.page-link
                  i.fas.fa-angle-left
              li.page-item
                strong.txtYear.page-link(data-type='b') 2019
              li.page-item
                .btnNextYear.page-link
                  i.fas.fa-angle-right
            .chart.chart-lg.mt-2
              canvas#chartBodycompotision
        script.
          var chartBodycomposition;
          document.addEventListener("DOMContentLoaded", function(event) {
            chartBodycomposition = new Chart(document.getElementById("chartBodycompotision"), {
              type: 'line',
              data: {
                //- labels: ["1월", "2월",  "3월",  "4월", "5월",  "6월",  "7월", "8월",  "9월",  "10월",  "11월",  "12월"],
                labels: ["Jan", "Feb",  "Mar",  "Apr", "May",  "Jun",  "Jul", "Aug",  "Sep",  "Oct",  "Nov",  "Dec"],
                datasets: [{
                  //- label: "몸무게",
                  label: "Body weight",
                  fill: false,
                  backgroundColor: "rgba(65, 212, 146, 0.5)",
                  borderColor: "#41D492",
                  data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                }, {
                  //- label: "골격근량",
                  label: "Skeletal muscle mass",
                  fill: false,
                  backgroundColor: "rgba(242, 102, 102, 0.5)",
                  borderColor: "#f26666",
                  data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                }, {
                  //- label: "체지방량",
                  label: "Body fat mass",
                  fill: false,
                  backgroundColor: "rgba(168, 119, 181, 0.5)",
                  borderColor: "#a877b5",
                  data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                }]
              },
              options: {
                maintainAspectRatio: false,
                legend: {
                  display: true
                },
                tooltips: {
                  intersect: false,
                  callbacks: {
                    label: function(tooltipItem, data) {
                        var label = data.datasets[tooltipItem.datasetIndex].label || '';

                        if (label) {
                            label += ' : ';
                        }
                        label += Math.round(tooltipItem.yLabel * 100) / 100;
                        label += 'KG';
                        return label;
                    }
                  }
                },
                hover: {
                  intersect: true
                },
                plugins: {
                  filler: {
                    propagate: false
                  }
                },
                elements: {
                  line: {
                    tension: 0
                  }
                },
                scales: {
                  xAxes: [{
                    reverse: true,
                    gridLines: {
                      color: "rgba(0,0,0,0.0)"
                    }
                  }],
                  yAxes: [{
                    ticks: {
                      stepSize: 5
                    },
                    display: true,
                    borderDash: [5, 5],
                    gridLines: {
                      color: "rgba(0,0,0,0)",
                      fontColor: "#fff"
                    }
                  }]
                }
              }
            });
          });
    .row
      .col-12.col-lg-12.d-flex
        .card.flex-fill.w-100
          .card-header
            .row
              .col-md-6
                h5.card-title.mb-0.mt-2 FFMI(Fat Free Mas Index)
              .col-md-6.text-right
                |FFMI : 
                //- span#txtJudgeFFMI 기록없음
                span#txtJudgeFFMI No record
          .card-body
            ul.pagination.pagination-lg.justify-content-center
              li.page-item
                .btnPrevYear.page-link
                  i.fas.fa-angle-left
              li.page-item
                strong.txtYear.page-link(data-type='f') 2019
              li.page-item
                .btnNextYear.page-link
                  i.fas.fa-angle-right
            .chart.chart-lg.mt-2
              canvas#chartFFMI
        script.
          var chartFFMI;
          document.addEventListener("DOMContentLoaded", function(event) {
            chartFFMI = new Chart(document.getElementById("chartFFMI"), {
              type: 'line',
              data: {
                //- labels: ["1월", "2월",  "3월",  "4월", "5월",  "6월",  "7월", "8월",  "9월",  "10월",  "11월",  "12월"],
                labels: ["Jan", "Feb",  "Mar",  "Apr", "May",  "Jun",  "Jul", "Aug",  "Sep",  "Oct",  "Nov",  "Dec"],
                datasets: [{
                  label: "FFMI",
                  fill: false,
                  backgroundColor: "rgba(242, 181, 29, 0.5)",
                  borderColor: "#f2b51d",
                  data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                }]
              },
              options: {
                maintainAspectRatio: false,
                legend: {
                  display: true
                },
                tooltips: {
                  intersect: false,
                  callbacks: {
                    label: function(tooltipItem, data) {
                        var label = data.datasets[tooltipItem.datasetIndex].label || '';

                        if (label) {
                            label += ' : ';
                        }
                        label += Math.round(tooltipItem.yLabel * 100) / 100;
                        return label;
                    }
                  }
                },
                hover: {
                  intersect: true
                },
                plugins: {
                  filler: {
                    propagate: false
                  }
                },
                elements: {
                  line: {
                    tension: 0
                  }
                },
                scales: {
                  xAxes: [{
                    reverse: true,
                    gridLines: {
                      color: "rgba(0,0,0,0.0)"
                    }
                  }],
                  yAxes: [{
                    ticks: {
                      stepSize: 5
                    },
                    display: true,
                    borderDash: [5, 5],
                    gridLines: {
                      color: "rgba(0,0,0,0)",
                      fontColor: "#fff"
                    }
                  }]
                }
              }
            });
          });
block script
  script.
    $(document).ready(init);

    function init(){
      var d = new Date();
      var month = d.getMonth()+1
      //- $('#txtMonth').text(month+'월');
      $('#txtMonth').text(month);
      ajaxGetWeightList(month);

      var year = d.getFullYear();
      ajaxGetBodycompositionList(year);
      ajaxGetFFMIList(year);

      $('#btnNextMonth').on('click', function(){
        var txtMonth = $(this).parents('ul').find('#txtMonth');
        var month = parseInt(txtMonth.text());
        if(month == 12){
          month = 1;
        }else{
          month++;
        }

        //- txtMonth.text(month+'월');
        txtMonth.text(month);

        ajaxGetWeightList(month);
      });

      $('#btnPrevMonth').on('click', function(){
        var txtMonth = $(this).parents('ul').find('#txtMonth');
        var month = parseInt(txtMonth.text());
        if(month == 1){
          month = 12;
        }else{
          month--;
        }

        //- txtMonth.text(month+'월');
        txtMonth.text(month);

        ajaxGetWeightList(month);
      });

      $('.btnNextYear').on('click', function(){
        var txtYear = $(this).parents('ul').find('.txtYear');
        var year = parseInt(txtYear.text());
        if(year == new Date().getFullYear()){
          return;
        }else{
          year++;
        }

        //- txtYear.text(year+'년');
        txtYear.text(year);

        if(txtYear.attr('data-type') == 'b'){
          ajaxGetBodycompositionList(year);
        }else if(txtYear.attr('data-type') == 'f'){
          ajaxGetFFMIList(year);
        }
      });

      $('.btnPrevYear').on('click', function(){
        var txtYear = $(this).parents('ul').find('.txtYear');
        var year = parseInt(txtYear.text());
        if(year == 1900){
          year = 2019;
        }else{
          year--;
        }

        //- txtYear.text(year+'년');
        txtYear.text(year);
        
        if(txtYear.attr('data-type') == 'b'){
          ajaxGetBodycompositionList(year);
        }else if(txtYear.attr('data-type') == 'f'){
          ajaxGetFFMIList(year);
        }
      });

      $('.btnGotoDailyReport').on('click', function(){
        window.location.href = getUrl('/view/dailyreport');  
      })

    }

    function afterLogin(){
      window.location.href = getUrl('/view/dashboard/');
    }

    function renderChartWeight(month, weightList){
      var date = new Date(), y = date.getFullYear();
      var lastDay = new Date(y, month, 0);
      lastDay = lastDay.getDate();

      chartWeight.config.data.labels = [];
      chartWeight.config.data.datasets[0].data = [];
      for(var day = 1; day <= lastDay; day++){
        //- chartWeight.config.data.labels.push(day+'일');
        chartWeight.config.data.labels.push('Day '+ day);
        if(weightList == undefined){
          chartWeight.config.data.datasets[0].data.push(0);
        }else{
          chartWeight.config.data.datasets[0].data.push(weightList[day-1]);
        }
      }
      
      chartWeight.update();
    }

    function ajaxGetWeightList(month){
      var params = {
        year : new Date().getFullYear(),
        month : month
      };

      var strURL = getUrl('/api/dashboard/weight');
      $.ajax({ 
        type: 'GET', 
        url: strURL,
        async: false, 
        data: params
      }).done(function(resultParams){
        //- var message = "몸무게 기록을 정상적으로 가져왔습니다.";
        //- var title = "월별 몸무게";
        var message = "Successfully inquired weight records.";
        var title = "Monthly weight";
        var type = "success";

        if(resultParams.isSuccess){
          renderChartWeight(month, resultParams.weightList);
        }else if(resultParams.needLogin){
          renderChartWeight(month);
        }else{
          type = "warning";
          //- message = "몸무게 기록을 가져오는데 실패했습니다.";
          message = "Failed to check weight records.";
          showMessage(message, title, type);
        }
      }).fail(function(resultParams){
        //- var message = "서버가 혼잡하오니 잠시 다시 이용 부탁드립니다.";
        var message = "The server is busy. Please use it again in a moment.";
        //- var title = "서비스점검중";
        var title = "In Service Inspection";
        var type = "error";
        showMessage(message, title, type);
      });
    }

    function renderChartBodycomposition(year, bodycompositionList){
      var date = new Date(), y = date.getFullYear();
      var lastDay = new Date(y, month, 0);
      lastDay = lastDay.getDate();

      chartBodycomposition.config.data.datasets[0].data = [];
      chartBodycomposition.config.data.datasets[1].data = [];
      chartBodycomposition.config.data.datasets[2].data = [];
      for(var month = 0; month < 12; month++){
        if(bodycompositionList != undefined){
          var info = bodycompositionList[month];
          chartBodycomposition.config.data.datasets[0].data.push(info.weight);
          chartBodycomposition.config.data.datasets[1].data.push(info.muscle);
          chartBodycomposition.config.data.datasets[2].data.push(info.fat);
        }else{
          chartBodycomposition.config.data.datasets[0].data.push(0);
          chartBodycomposition.config.data.datasets[1].data.push(0);
          chartBodycomposition.config.data.datasets[2].data.push(0);
        }
      }
      
      chartBodycomposition.update();
    }

    function ajaxGetBodycompositionList(year){
      var params = {
        year : year
      };

      var strURL = getUrl('/api/dashboard/bodycomposition');
      $.ajax({ 
        type: 'GET', 
        url: strURL,
        async: false, 
        data: params
      }).done(function(resultParams){
        //- var message = "체성분 기록을 정상적으로 가져왔습니다.";
        //- var title = "체성분";
        var message = "Successfully inquired bodycomposition records";
        var title = "Bodycomposition";
        var type = "success";

        if(resultParams.isSuccess){
          renderChartBodycomposition(year, resultParams.bodycompositionList);
        }else if(resultParams.needLogin){
          renderChartBodycomposition(year);
        }else{
          type = "warning";
          //- message = "체성분 기록을 가져오는데 실패했습니다.";
          message = "Failed to inquired bodycomposition records.";
          showMessage(message, title, type);
        }
      }).fail(function(resultParams){
        //- var message = "서버가 혼잡하오니 잠시 다시 이용 부탁드립니다.";
        var message = "The server is busy. Please use it again in a moment.";
        //- var title = "서비스점검중";
        var title = "In Service Inspection";
        var type = "error";
        showMessage(message, title, type);
      });
    }

    function renderChartFFMI(year, ffmiList){
      var date = new Date(), y = date.getFullYear();
      var lastDay = new Date(y, month, 0);
      lastDay = lastDay.getDate();

      chartFFMI.config.data.datasets[0].data = [];
      for(var month = 0; month < 12; month++){
        if(ffmiList != undefined){
          var info = ffmiList[month];
          chartFFMI.config.data.datasets[0].data.push(info.ffmi);
          if(info.ffmi > 0)
            judgeFFMI(info.ffmi);
        }else{
          chartFFMI.config.data.datasets[0].data.push(0);
        }
      }
      
      chartFFMI.update();

      if(ffmiList == undefined){
        judgeFFMI(0);
      }
    }

    function judgeFFMI(ffmi){
      var txtJudgeFFMI = $('#txtJudgeFFMI').removeClass();

      if(ffmi == 0){
        //- txtJudgeFFMI.text('기록없음');
        txtJudgeFFMI.text('No record');
      }else if(ffmi < 18){
        //- txtJudgeFFMI.text('평균이하').addClass('text-warning');
        txtJudgeFFMI.text('Below average').addClass('text-warning');
      }else if(ffmi < 21){
        //- txtJudgeFFMI.text('평균').addClass('text-primary ');
        txtJudgeFFMI.text('Average').addClass('text-primary ');
      }else if(ffmi < 23){
        //- txtJudgeFFMI.text('일반인 기준 매우 좋은 몸').addClass('text-info');
        txtJudgeFFMI.text('Excellent').addClass('text-info');
      }else if(ffmi < 26){
        //- txtJudgeFFMI.text('네추럴의 한계').addClass('text-success');
        txtJudgeFFMI.text('Superior').addClass('text-success');
      }else if(ffmi < 28){
        //- txtJudgeFFMI.text('축복받은 몸이거나 약물사용 가능성 있음').addClass('text-danger');
        txtJudgeFFMI.text('Scores considered suspicious but still attainable naturally').addClass('text-danger');
      }else if(ffmi >= 28){
        //- txtJudgeFFMI.text('약물없이 도달할 수 없는 몸').addClass('text-danger');
        txtJudgeFFMI.text('Highly unlikely scores to be obtained naturally without steroid usage').addClass('text-danger');
      }
    }

    function ajaxGetFFMIList(year){
      var params = {
        year : year
      };

      var strURL = getUrl('/api/dashboard/ffmi');
      $.ajax({ 
        type: 'GET', 
        url: strURL,
        async: false, 
        data: params
      }).done(function(resultParams){
        //- var message = "FFMI 기록을 정상적으로 가져왔습니다.";
        var message = "Successfully inquired FFMI records.";
        var title = "FFMI";
        var type = "success";

        if(resultParams.isSuccess){
          renderChartFFMI(year, resultParams.ffmiList);
        }else if(resultParams.needLogin){
          renderChartFFMI(year);
        }else{
          type = "warning";
          //- message = "FFMI 기록을 가져오는데 실패했습니다.";
          message = "Failed to inquired FFMI records.";
          showMessage(message, title, type);
        }
      }).fail(function(resultParams){
        //- var message = "서버가 혼잡하오니 잠시 다시 이용 부탁드립니다.";
        var message = "The server is busy. Please use it again in a moment.";
        //- var title = "서비스점검중";
        var title = "In Service Inspection";
        var type = "error";
        showMessage(message, title, type);
      });
    }